#!/usr/bin/env python

import numpy as np
import random

from q1_softmax import softmax
from q2_sigmoid import sigmoid, sigmoid_grad
from q2_gradcheck import gradcheck_naive


def forward_backward_prop(data, labels, params, dimensions):
    """
    Forward and backward propagation for a two-layer sigmoidal network

    Compute the forward propagation and for the cross entropy cost,
    and backward propagation for the gradients for all parameters.

    Arguments:
    data -- M x Dx matrix, where each row is a training example.
    labels -- M x Dy matrix, where each row is a one-hot vector.
    params -- Model parameters, these are unpacked for you.
    dimensions -- A tuple of input dimension, number of hidden units
                  and output dimension
    """

    ### Unpack network parameters (do not modify)
    ofs = 0
    Dx, H, Dy = (dimensions[0], dimensions[1], dimensions[2])

    W1 = np.reshape(params[ofs:ofs+ Dx * H], (Dx, H))
    ofs += Dx * H
    b1 = np.reshape(params[ofs:ofs + H], (1, H))
    ofs += H
    W2 = np.reshape(params[ofs:ofs + H * Dy], (H, Dy))
    ofs += H * Dy
    b2 = np.reshape(params[ofs:ofs + Dy], (1, Dy))

    ### YOUR CODE HERE: forward propagation

    # sigmoid x_i input       ##, product first
    #sig_xi_prod = data.dot(W1)
    sig_xi_input = data.dot(W1) + b1
    sig_xi_exp = math.exp(-sig_xi_input)
    sig_xi_den = 1 + sig_xi_exp
    sig_xi = 1 / sig_xi_den


    # softmax numerator exponent input      ##, product first
    #sfmax_num_exp_prod = sig_xi.dot(W2)
    sfmax_num_exp_input = sig_xi.dot(W2) + b2
    # softmax numerator = softmax numerator exponent
    sfmax_num = math.exp(-sfmax_num_exp_input)

    # sigmoid x_j input       ##, product first
    #sig_xj_prod = data.dot(W1)
    sig_xj_input = data.dot(W1) + b1
    sig_xj_exp = math.exp(-sig_xj_input)
    sig_xj_den = 1 + sig_xj_exp
    sig_xj = 1 / sig_xj_den
    # softmax denominator exponent input      ##, product first
    #sfmax_den_exp_prod = sig_xj.dot(W2)
    sfmax_den_exp_input = sig_xj.dot(W2) + b2
    # softmax denominator exponent
    sfmax_den_exp = math.exp(-sfmax_den_exp_input)
    # softmax denominator = sum for all j's
    sfmax_den = np.sum(sfmax_den_exp, axis=1)
    
    sfmax_invden = 1 / sfmax_den        # invert!
    sfmax = sfmax_num * sfmax_invden    # the softmax
    log_sfmax = math.ln(sfmax)          # the log
    product = np.multiply(y, log_sfmax) # multiply by y element-wise
    neg_sum = -np.sum(product, axis=0)  # add up the rows

    ### END YOUR CODE

    ### YOUR CODE HERE: backward propagation                

    # TO DO: go over the chain rule stuff to make sure there are the right number of d[var]'s

    # sum and product out?    
    # sum: denominator squared and summed and negatived. Probably. (Check online)
    dy = log_sfmax
    dlog_sfmax = y
    # numerator first
    dsfmax_num = sfmax_invden * dlog_sfmax
    dsfmax_num_exp = sfmax_num * dsfmax_num
    # "pocket" gradW2 and gradb2 portions from numerator
    gradW2 = -sig_xi * dsfmax_num_exp
    gradb2 = -1 * dsfmax_num_exp
    # continuing:
    #dsfmax_den_exp_input = -numpy.multiply(sig_xi,(1-sig_xi)).dot(W2) * dsfmax_num_exp
    dsig_xi = - W2 * dsfmax_num_exp
    dsig_xi_den = (-1) / (sig_xi_den**2) * dsig_xi
    #dsig_xi_exp = 1 / (sig_xi_input * sig_xi_exp) * dsig_xi_den    # first possible failure point
    dsig_xi_exp = sig_xi_input * sig_xi_exp * dsig_xi_den
    # "pocket" gradW1 and gradb1 portions from numerator
    gradW1 = data * dsig_xi_exp
    gradb1 = dsig_xi_exp
    # denominator
    dsfmax_invden = sfmax_num * dlog_sfmax
    dsfmax_den = (-1) / (sfmax_den**2) * dsfmax_invden  # similar possible failure point
    dsfmax_den_exp = sfmax_den_exp * sfmax_den_exp_input * dsfmax_num_exp      # in case needed: np.sum(sfmax_den_exp, axis=1)
    # "pocket" gradW2 and gradb2 portions from denomenator
    gradW2 += -sig_xj * dsfmax_den_exp
    gradb2 += -1 * dsfmax_den_exp
    # continuing:
    #dsfmax_den_exp_input = -numpy.multiply(sig_xi,(1-sig_xi)).dot(W2) * dsfmax_num_exp
    dsig_xj = - W2 * dsfmax_num_exp
    dsig_xj_den = (-1) / (sig_xj_den**2) * dsig_xj
    dsig_xj_exp = sig_xj_input * sig_xj_exp * dsig_xj_den    # similar possible failure point
    gradW1 += data * dsig_xj_exp
    gradb1 += dsig_xj_exp

    ### END YOUR CODE

    ### Stack gradients (do not modify)
    grad = np.concatenate((gradW1.flatten(), gradb1.flatten(),
        gradW2.flatten(), gradb2.flatten()))

    return cost, grad


def sanity_check():
    """
    Set up fake data and parameters for the neural network, and test using
    gradcheck.
    """
    print "Running sanity check..."

    N = 20
    dimensions = [10, 5, 10]
    data = np.random.randn(N, dimensions[0])   # each row will be a datum
    labels = np.zeros((N, dimensions[2]))
    for i in xrange(N):
        labels[i, random.randint(0,dimensions[2]-1)] = 1

    params = np.random.randn((dimensions[0] + 1) * dimensions[1] + (
        dimensions[1] + 1) * dimensions[2], )

    gradcheck_naive(lambda params:
        forward_backward_prop(data, labels, params, dimensions), params)


def your_sanity_checks():
    """
    Use this space add any additional sanity checks by running:
        python q2_neural.py
    This function will not be called by the autograder, nor will
    your additional tests be graded.
    """
    print "Running your sanity checks..."
    ### YOUR CODE HERE
    raise NotImplementedError
    ### END YOUR CODE


if __name__ == "__main__":
    sanity_check()
    your_sanity_checks()
